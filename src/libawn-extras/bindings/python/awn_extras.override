%%
headers
/*
 * Copyright (c) 2008 Mark Lee <avant-wn@lazymalevolence.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
*/
#include <pycairo.h>
#include <pygobject.h>
#include <libawn/awn-cairo-utils.h>
#include <gtk/gtk.h>
#include <libawn-extras/awn-extras.h>

static Pycairo_CAPI_t *Pycairo_CAPI;
%%
modulename _extras
%%
import gtk.gdk.Pixbuf as PyGdkPixbuf_Type
import cairo.Surface as PyCairoSurface_Type
import gtk.ImageMenuItem as PyGtkImageMenuItem_Type
%%
override get_pixbuf_from_surface kwargs
static PyObject *
_wrap_get_pixbuf_from_surface (PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "surface", "pixbuf", NULL };

    PyObject *py_surface;
    PyObject *py_pixbuf = NULL;
    GdkPixbuf *pixbuf;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs, "O|O:Surface.to_pixbuf", kwlist, &py_surface, &py_pixbuf)) {
        return NULL;
    }

    if (!PyObject_TypeCheck (py_surface, &PyCairoSurface_Type)) {
        PyErr_SetString (PyExc_TypeError, "Argument must be a cairo surface");
        return NULL;
    }

    if (py_pixbuf) {
        if (!pygobject_check (py_pixbuf, &PyGdkPixbuf_Type)) {
            PyErr_SetString (PyExc_TypeError, "Second argument (if set) must be a GdkPixbuf");
            return NULL;
        }
        pixbuf = surface_2_pixbuf (GDK_PIXBUF (pygobject_get (py_pixbuf)), ((PycairoSurface*)py_surface)->surface);
    } else {
        pixbuf = get_pixbuf_from_surface (((PycairoSurface*)py_surface)->surface);
    }
    return pygobject_new (G_OBJECT (pixbuf));
}
%%
override notify_message kwargs
static PyObject *
_wrap_notify_message (PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "summary", "body", "icon", "timeout", "async", NULL };

    gchar *summary;
    gchar *body;
    gchar *icon;
    glong timeout;
    gboolean async;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs, "ssslb:notify_message", kwlist, &summary, &body, &icon, &timeout, &async)) {
        return NULL;
    }

    if (async) {
        notify_message_async (summary, body, icon, timeout);
        Py_INCREF(Py_None);
        return Py_None;
    } else {
        return PyBool_FromLong (notify_message (summary, body, icon, timeout));
    }
}
%%
override gtk_image_menu_item_new_with_label kwargs
static PyObject*
_wrap_gtk_image_menu_item_new_with_label (PyObject *self, PyObject *args, PyObject *kwargs)
{
  static char *kwlist[] = { "label", NULL };

  gchar *label;
  GtkWidget *item;

  if (!PyArg_ParseTupleAndKeywords (args, kwargs, "s:image_menu_item_new_with_label", kwlist, &label))
  {
    return NULL;
  }

  item = gtk_image_menu_item_new_with_label (label);

  if (item)
  {
    return pygobject_new ((GObject*)item);
  }
  else
  {
    return NULL;
  }
}
